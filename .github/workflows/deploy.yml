name: Deploy Blog

on:
  push:
    branches: [ pain ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
  
      - name: Restore file modification times
        uses: crazy-max/ghaction-git-restore-mtime@v1.1

      - name: Set up PHP and Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer

      - name: Install PHP dependencies   
        working-directory: src  
        run: composer install --no-dev --optimize-autoloader

      # (falls ihr weiterhin eine src/Config.template.php nutzt)
      - name: Create src/Config.php   
        working-directory: src  
        run: |
          sed \
            -e "s/{{DB_HOST}}/${{ vars.DB_HOST }}/g" \
            -e "s/{{DB_NAME}}/${{ vars.DB_NAME }}/g" \
            -e "s/{{DB_USER}}/${{ secrets.DB_USER }}/g" \
            -e "s/{{DB_PASS}}/${{ secrets.DB_PASS }}/g" \
            -e "s/{{ADMIN_API_KEY}}/${{ secrets.ADMIN_API_KEY }}/g" \
            -e "s/{{BLOG_TITLE}}/${{ vars.BLOG_TITLE }}/g" \
            Config.template.php > Config.php

         # ────────────────────────────────────────────────────────────────
      # 2) Prepare publish directory (copy src → publish, excluding templates etc.)
      - name: Prepare publish directory
        run: |
          mkdir -p publish
          rsync -a \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='README' \
            --exclude='LICENSE' \
            --exclude='Config.template.php' \
            --exclude='composer.*' \
            ./src/ ./publish/

      # ────────────────────────────────────────────────────────────────
      # 3) Deployment per SFTP – jetzt aus publish/wwwroot in dein Web-Root
      - name: Deploy to Strato via SFTP
        uses: wangyucode/sftp-upload-action@v2.0.4
        with:
          host: ${{ vars.FTP_HOST }}
          port: ${{ vars.FTP_PORT }}
          username: ${{ secrets.FTP_USER }}
          password: ${{ secrets.FTP_PASS }}
          localDir: ./publish
          remoteDir: ${{ vars.FTP_REMOTE_DIR }}       

      # ─────────────────────────────────────────────────────────────────
      # 4) Trigger des Update-Skripts
      - name: Trigger Update Script
        run: |
          echo "Triggering database update..."
          
          # Make the request and capture both response and HTTP code
          response=$(curl -sS -X POST \
            -H "Authorization: Bearer ${{ secrets.ADMIN_API_KEY }}" \
            -H "Content-Type: application/json" \
            -w "\n%{http_code}" \
            "${{ vars.BLOG_URL }}/admin/update")
          
          # Split response and HTTP code
          http_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | sed '$d')
          
          echo "HTTP Status: $http_code"
          echo "Response: $body"
          
          # Check HTTP code
          if [ "$http_code" -ne 200 ]; then
            echo "Error: Update request failed with HTTP code $http_code"
            exit 1
          fi
          
          # Parse JSON response
          if ! echo "$body" | jq -e . >/dev/null 2>&1; then
            echo "Error: Invalid JSON response"
            exit 1
          fi
          
          # Check for success in response
          if ! echo "$body" | jq -e '.success == true' >/dev/null 2>&1; then
            error_msg=$(echo "$body" | jq -r '.message // "Unknown error"')
            echo "Error: Update failed - $error_msg"
            exit 1
          fi
          
          # Check migration results
          if echo "$body" | jq -e '.results | length > 0' >/dev/null 2>&1; then
            echo "Applied migrations:"
            echo "$body" | jq -r '.results[] | "  - \(.file): \(.status)"'
          else
            echo "No new migrations to apply"
          fi
          
          echo "Update completed successfully"
