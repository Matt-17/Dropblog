@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<div class="markdown-editor">
    <div class="toolbar">
        <button type="button" class="btn btn-sm" @onclick="@(() => InsertMarkdownAsync("**", "**"))" title="Bold">
            <strong>B</strong>
        </button>
        <button type="button" class="btn btn-sm" @onclick="@(() => InsertMarkdownAsync("*", "*"))" title="Italic">
            <em>I</em>
        </button>
        <button type="button" class="btn btn-sm" @onclick="@(() => InsertMarkdownAsync("<u>", "</u>"))" title="Underline">
            <u>U</u>
        </button>
        <button type="button" class="btn btn-sm" @onclick="@(() => InsertCodeAsync(false))" title="Inline Code">
            <code>c</code>
        </button>
        <button type="button" class="btn btn-sm" @onclick="@(() => InsertCodeAsync(true))" title="Code Block">
            <code>&lt;c/&gt;</code>
        </button>
        <button type="button" class="btn btn-sm" @onclick="ToggleListAsync" title="Toggle List">
            â˜°
        </button>
        <button type="button" class="btn btn-sm" @onclick="@(() => InsertMarkdownAsync("[link text](url)", ""))" title="Link">
            ðŸ”—
        </button>
    </div>
    <textarea @ref="textareaRef" 
              id="@textareaId"
              @bind="Value" 
              @bind:event="oninput"
              @onblur="ForceUpdateAsync"
              class="form-control editor-textarea" 
              placeholder="Write your post in Markdown..."
              rows="10"></textarea>
</div>

@code {
    private ElementReference textareaRef;
    private string textareaId = Guid.NewGuid().ToString();

    [Parameter] public string Value { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    private async Task InsertMarkdownAsync(string before, string after)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("markdownEditor.insertMarkdown", textareaId, before, after);
            // Get the updated value from the textarea
            await UpdateValueFromTextarea();
        }
        catch
        {
            // Fallback to simple append if JSInterop fails
            Value += before + "text" + after;
            await ValueChanged.InvokeAsync(Value);
        }
    }

    private async Task InsertCodeAsync(bool isBlock)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("markdownEditor.insertCode", textareaId, isBlock);
            await UpdateValueFromTextarea();
        }
        catch
        {
            // Fallback
            Value += isBlock ? "```\ncode\n```" : "`code`";
            await ValueChanged.InvokeAsync(Value);
        }
    }

    private async Task ToggleListAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("markdownEditor.toggleList", textareaId);
            await UpdateValueFromTextarea();
        }
        catch
        {
            // Fallback to simple append
            Value += "- ";
            await ValueChanged.InvokeAsync(Value);
        }
    }

    private async Task ForceUpdateAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("markdownEditor.forceUpdate", textareaId);
            await UpdateValueFromTextarea();
        }
        catch
        {
            // Ignore errors in force update
        }
    }

    private async Task UpdateValueFromTextarea()
    {
        try
        {
            // Small delay to ensure DOM is updated
            await Task.Delay(50);
            await textareaRef.FocusAsync();
            
            // The value should be automatically updated through the @bind directive
            // but we trigger the event to ensure proper state synchronization
            await ValueChanged.InvokeAsync(Value);
        }
        catch
        {
            // Ignore errors in value update
        }
    }
} 