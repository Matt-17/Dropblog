@page "/"
@using Dropblog.Services
@inject BlogApiService ApiService

<PageTitle>New Post - Dropblog</PageTitle>

<div class="new-post-container">
    <h1>‚úçÔ∏è Create New Post</h1>

    <div class="post-form">
        <div class="form-group">
            <MarkdownEditor @bind-Value="content" @bind-Value:after="OnContentChanged" />
        </div>

        <div class="form-selector">
            <PostTypeSelector @bind-SelectedType="selectedType" />
        </div>

        <div class="form-actions">
            <button class="btn btn-primary" @onclick="CreatePost" disabled="@isPosting">
                @if (isPosting)
                {
                    <span class="spinner"></span>
                    <text>Posting...</text>
                }
                else
                {
                    <text>üì§ Post</text>
                }
            </button>
        </div>

        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="status-message @(isSuccess ? "success" : "error")">
                @statusMessage
                @if (isSuccess && !string.IsNullOrEmpty(postUrl))
                {
                    <br />
                    <a href="@($"https://numbertools.de{postUrl}")" target="_blank" class="post-link">
                        View Post üîó
                    </a>
                }
            </div>
        }
    </div>
</div>

@code {
    private string content = string.Empty;
    private string selectedType = "note";
    private bool isPosting = false;
    private string statusMessage = string.Empty;
    private bool isSuccess = false;
    private string postUrl = string.Empty;

    private void OnContentChanged()
    {
        // This ensures the content is properly synchronized
        // when the user types and then immediately clicks post
        StateHasChanged();
    }

    private async Task CreatePost()
    {
        if (string.IsNullOrWhiteSpace(content))
        {
            statusMessage = "‚ö†Ô∏è Please enter some content for your post.";
            isSuccess = false;
            return;
        }

        isPosting = true;
        statusMessage = string.Empty;
        StateHasChanged();

        try
        {
            var response = await ApiService.CreatePostAsync(content.Trim(), selectedType);

            if (response.Success)
            {
                statusMessage = "‚úÖ Post created successfully!";
                isSuccess = true;
                postUrl = response.PostUrl;

                // Clear form only after successful post
                content = string.Empty;
                selectedType = "note";
            }
            else
            {
                statusMessage = $"‚ùå Failed to create post: {response.Message}";
                isSuccess = false;
                // Don't clear content on error - user can fix and retry
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"‚ùå Error creating post: {ex.Message}";
            isSuccess = false;
            // Don't clear content on error - user can fix and retry
        }
        finally
        {
            isPosting = false;
            StateHasChanged();
        }
    }
}
